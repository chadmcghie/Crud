name: E2E Tests with WebServer

on:
  push:
    branches: [ test-server-optimization ]
  pull_request:
    branches: [ main, dev ]
  workflow_dispatch:

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  e2e-tests-webserver:
    name: E2E Tests (Playwright WebServer)
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
        
    - name: Restore .NET dependencies
      run: dotnet restore Crud.sln
      
    - name: Build .NET solution
      run: dotnet build Crud.sln --no-restore --configuration Release
      
    - name: Install Angular dependencies
      working-directory: ./src/Angular
      run: npm ci
      
    - name: Build Angular
      working-directory: ./src/Angular
      run: npm run build
      
    - name: Install E2E test dependencies
      working-directory: ./test/Tests.E2E.NG
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: ./test/Tests.E2E.NG
      run: npx playwright install --with-deps chromium
      
    - name: Run E2E Tests with WebServer Config
      working-directory: ./test/Tests.E2E.NG
      run: |
        echo "🚀 Running E2E tests with Playwright WebServer configuration..."
        echo "This uses Playwright's built-in server management - no custom setup needed!"
        npx playwright test --config=playwright.config.webserver.ts --reporter=list,html
      env:
        CI: true
        ASPNETCORE_ENVIRONMENT: Testing
        DatabaseProvider: SQLite
        TEST_RESET_TOKEN: test-only-token
        # Unique database per test run to avoid locking
        TEST_RUN_ID: ${{ github.run_id }}-${{ github.run_number }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-webserver-results-${{ github.run_number }}
        path: |
          test/Tests.E2E.NG/test-results/
          test/Tests.E2E.NG/playwright-report/
          
    - name: Upload database files (for debugging)
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: database-files-${{ github.run_number }}
        path: |
          CrudTest_*.db
          CrudTest_*.db-wal
          CrudTest_*.db-shm
          
    - name: Publish test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: E2E Test Results (WebServer)
        path: 'test/Tests.E2E.NG/test-results/results.xml'
        reporter: java-junit
        fail-on-error: false
        
    - name: Test Summary
      if: always()
      run: |
        echo "## 🧪 E2E Test Results (WebServer Configuration)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Configuration Benefits:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Automatic server lifecycle management by Playwright" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Unique database file per test run (prevents locking)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ No custom server management code needed" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Simpler and more reliable CI/CD" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ -f test/Tests.E2E.NG/test-results/results.json ]; then
          echo "### Test Execution Details:" >> $GITHUB_STEP_SUMMARY
          echo "Check the artifacts for detailed test results and reports." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ⚠️ No test results file found" >> $GITHUB_STEP_SUMMARY
        fi
        
    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up test databases..."
        # Remove test database files created during this run
        rm -f CrudTest_*.db CrudTest_*.db-wal CrudTest_*.db-shm 2>/dev/null || true
        echo "✅ Cleanup complete"