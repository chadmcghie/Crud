name: Feature Branch Tests

on:
  push:
    branches: 
      - 'feature/**'
      - 'bugfix/**'
      - 'hotfix/**'
      - 'copilot/**'
  workflow_dispatch:

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  # Check if there's an open PR for this branch to avoid duplicate testing
  check-pr-status:
    name: Check for Open PR
    runs-on: ubuntu-latest
    outputs:
      has_open_pr: ${{ steps.check_pr.outputs.has_open_pr }}
      pr_number: ${{ steps.check_pr.outputs.pr_number }}

    steps:
    - name: Check for open PR
      id: check_pr
      run: |
        echo "🔍 Checking if branch ${{ github.ref_name }} has an open PR..."

        # Use GitHub CLI to check for open PRs from this branch
        PR_DATA=$(gh pr list --repo ${{ github.repository }} \
          --head ${{ github.ref_name }} --state open --json number,title --limit 1)

        if [ "$(echo "$PR_DATA" | jq length)" -gt 0 ]; then
          PR_NUMBER=$(echo "$PR_DATA" | jq -r '.[0].number')
          PR_TITLE=$(echo "$PR_DATA" | jq -r '.[0].title')
          echo "has_open_pr=true" >> $GITHUB_OUTPUT
          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "✅ Found open PR #$PR_NUMBER: $PR_TITLE"
          echo "⏭️ Skipping feature tests - PR validation workflow will handle testing"
        else
          echo "has_open_pr=false" >> $GITHUB_OUTPUT
          echo "pr_number=" >> $GITHUB_OUTPUT
          echo "✅ No open PR found - will run feature branch tests"
        fi
      env:
        GH_TOKEN: ${{ github.token }}

  # Build once at feature level, create artifacts for downstream reuse
  build-and-quick-validation:
    name: Build & Quick Validation
    runs-on: ubuntu-latest
    needs: check-pr-status
    # Only run if there's no open PR for this branch
    if: needs.check-pr-status.outputs.has_open_pr == 'false'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
        
    # Backend build - this is the ONLY build for this code version
    - name: Restore .NET dependencies
      run: dotnet restore solutions/Crud.sln
      
    - name: Build backend (once for entire pipeline)
      run: dotnet build solutions/Crud.sln --no-restore --configuration Release
      
    - name: Create versioned artifact for downstream reuse
      run: |
        echo "VERSION=${{ github.sha }}" >> $GITHUB_ENV
        echo "BUILD_TIMESTAMP=$(date -u +%Y-%m-%dT%H:%M:%SZ)" >> $GITHUB_ENV
        # Package with version info for artifact traceability
        echo "{\"version\":\"${{ github.sha }}\",\"timestamp\":\"$(date -u +%Y-%m-%dT%H:%M:%SZ)\",\"branch\":\"${{ github.ref_name }}\",\"buildNumber\":\"${{ github.run_number }}\",\"workflow\":\"feature-branch-tests\"}" > version.json
        
    - name: Verify appsettings files exist
      run: |
        echo "📁 Verifying appsettings files before artifact upload:"
        ls -la src/Api/appsettings*.json
        echo "✅ All appsettings files found"
      
    - name: Upload build artifacts for reuse in PRs
      uses: actions/upload-artifact@v4
      with:
        name: feature-build-${{ github.sha }}
        path: |
          src/*/bin/Release/
          test/*/bin/Release/
          src/Api/appsettings*.json
          version.json
        retention-days: 7  # Shorter retention for feature artifacts
      
    - name: Run backend unit tests (quick validation)
      run: |
        echo "🧪 Running backend unit tests for quick validation..."
        dotnet test test/Tests.Unit.Backend/Tests.Unit.Backend.csproj --no-build --configuration Release
      
    # Frontend quick validation
    - name: Install Angular dependencies
      working-directory: ./src/Angular
      run: npm ci
      
    - name: Run Angular lint
      working-directory: ./src/Angular
      run: npm run lint
      
    - name: Run Angular unit tests
      working-directory: ./src/Angular
      run: npm run test -- --watch=false --browsers=ChromeHeadless
      
    - name: Summary
      if: always()
      run: |
        echo "## 🏗️ Feature Branch Build & Validation Complete" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Progressive Testing Strategy**: Build artifacts created for commit ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### What was completed:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Backend build (ONCE for entire pipeline)" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Build artifacts created: \`feature-build-${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Backend unit tests" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Frontend linting and unit tests" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Artifact Reuse Strategy:" >> $GITHUB_STEP_SUMMARY
        echo "- **Build artifacts** will be reused by PR validation (no rebuild)" \
          >> $GITHUB_STEP_SUMMARY
        echo "- **Staging deployment** will reuse PR artifacts (no rebuild)" \
          >> $GITHUB_STEP_SUMMARY
        echo "- **Production deployment** will reuse PR artifacts (no rebuild)" \
          >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Next steps:" >> $GITHUB_STEP_SUMMARY
        echo "- Create PR to \`dev\`: Reuse artifacts + integration tests" \
          >> $GITHUB_STEP_SUMMARY
        echo "- After merge to \`dev\`: E2E smoke tests run during staging deployment" \
          >> $GITHUB_STEP_SUMMARY
        echo "- PR to \`main\`: Reuse artifacts + E2E smoke tests + production safety checks" \
          >> $GITHUB_STEP_SUMMARY

  # Notification job when skipped due to open PR
  pr-skip-notification:
    name: Skipped - Open PR Detected
    runs-on: ubuntu-latest
    needs: check-pr-status
    # Only run if there IS an open PR for this branch
    if: needs.check-pr-status.outputs.has_open_pr == 'true'

    steps:
    - name: Skip notification
      run: |
        echo "## ⏭️ Feature Branch Tests Skipped" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Reason**: This branch has an open PR" \
          "(#${{ needs.check-pr-status.outputs.pr_number }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### 🚀 Progressive Testing Strategy" >> $GITHUB_STEP_SUMMARY
        echo "To avoid duplicate test runs, feature branch testing is skipped when a PR exists." \
          >> $GITHUB_STEP_SUMMARY
        echo "The **Pull Request Validation** workflow will handle all testing for this branch." \
          >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### What happens next:" >> $GITHUB_STEP_SUMMARY
        echo "- ✅ PR validation workflow will run comprehensive tests" \
          >> $GITHUB_STEP_SUMMARY
        echo "- ✅ Build artifacts will be created by PR workflow" \
          >> $GITHUB_STEP_SUMMARY
        echo "- ✅ All test suites (unit, integration, E2E) will run via PR workflow" \
          >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**This prevents duplicate testing and saves CI resources** 🎯" \
          >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "View PR: https://github.com/${{ github.repository }}/pull/${{ needs.check-pr-status.outputs.pr_number }}"
