name: Deploy to Staging

on:
  push:
    branches: [ dev ]
  workflow_dispatch:  # Allow manual trigger

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  # Skip deployment if it's a Copilot commit
  check-commit:
    name: Check Commit Author
    runs-on: ubuntu-latest
    outputs:
      should-deploy: ${{ steps.check.outputs.should-deploy }}
    
    steps:
    - name: Check if Copilot commit
      id: check
      run: |
        if [[ "${{ github.event.head_commit.author.email }}" == *"copilot"* ]] || 
           [[ "${{ github.event.head_commit.author.name }}" == *"copilot"* ]]; then
          echo "should-deploy=false" >> $GITHUB_OUTPUT
          echo "⏭️ Skipping deployment - Copilot commit detected"
        else
          echo "should-deploy=true" >> $GITHUB_OUTPUT
          echo "✅ Proceeding with staging deployment"
        fi

  full-test-suite:
    name: Full Test Suite
    runs-on: ubuntu-latest
    needs: check-commit
    if: needs.check-commit.outputs.should-deploy == 'true'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
        
    # Code quality checks
    - name: Backend Code Format Check
      run: |
        echo "🔍 Checking C# code formatting..."
        dotnet format solutions/Crud.sln --verify-no-changes --verbosity diagnostic || (echo "❌ Code formatting issues found. Run 'dotnet format' locally to fix." && exit 1)
        
    # Build solution
    - name: Build solution
      run: |
        dotnet restore solutions/Crud.sln
        dotnet build solutions/Crud.sln --configuration Release
        
    # Run all backend unit tests
    - name: Backend unit tests (full)
      run: |
        echo "🧪 Running all backend unit tests..."
        dotnet test test/Tests.Unit.Backend/Tests.Unit.Backend.csproj --configuration Release --logger "trx;LogFileName=unit-tests.trx"
        
    # Run all backend integration tests
    - name: Backend integration tests (full)
      run: |
        echo "🧪 Running all backend integration tests..."
        dotnet test test/Tests.Integration.Backend/Tests.Integration.Backend.csproj --configuration Release --logger "trx;LogFileName=integration-tests.trx"
      env:
        CI: true
        ASPNETCORE_ENVIRONMENT: Testing
        
    # Build and test frontend
    - name: Frontend build and tests
      working-directory: ./src/Angular
      run: |
        npm ci
        npm run lint
        npm run test -- --watch=false --browsers=ChromeHeadless
        npm run build -- --configuration=staging
        
    # Install E2E dependencies
    - name: Install E2E dependencies
      working-directory: ./test/Tests.E2E.NG
      run: |
        npm ci
        npx playwright install --with-deps chromium
        
    # Run full E2E test suite
    - name: Run full E2E test suite
      working-directory: ./test/Tests.E2E.NG
      run: |
        echo "🧪 Running full E2E test suite (174 tests)..."
        npm run test:webserver
      env:
        CI: true
        ASPNETCORE_ENVIRONMENT: Testing
        DatabaseProvider: SQLite
        TEST_RESET_TOKEN: test-only-token
        TEST_RUN_ID: ${{ github.run_id }}-${{ github.run_number }}
        
    - name: Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: staging-test-results-${{ github.sha }}
        path: |
          TestResults/
          test/Tests.E2E.NG/playwright-report/
          test/Tests.E2E.NG/test-results/
        retention-days: 7

  build-artifacts:
    name: Build Deployment Artifacts  
    runs-on: ubuntu-latest
    needs: full-test-suite
    if: needs.full-test-suite.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
        
    # Build Angular for staging
    - name: Build frontend for staging
      working-directory: ./src/Angular
      run: |
        npm ci
        npm run build -- --configuration=staging
        
    # Build deployment artifacts
    - name: Publish backend
      run: dotnet publish src/Api/Api.csproj -c Release -o ./publish/api
      
    - name: Package backend
      run: |
        cd ./publish/api
        zip -r ../../staging-api.zip .
        cd ../..
        
    - name: Package frontend
      run: |
        cd ./src/Angular/dist
        zip -r ../../../staging-frontend.zip .
        cd ../../..
        
    - name: Upload staging artifacts
      uses: actions/upload-artifact@v4
      with:
        name: staging-artifacts-${{ github.sha }}
        path: |
          staging-api.zip
          staging-frontend.zip
        retention-days: 7

  deploy-staging:
    name: Deploy to Staging Environment
    runs-on: ubuntu-latest
    needs: build-artifacts
    environment:
      name: staging
      url: ${{ steps.deploy.outputs.url }}
    
    steps:
    - name: Download artifacts
      uses: actions/download-artifact@v4
      with:
        name: staging-artifacts-${{ github.sha }}
        
    # ====================================
    # Staging Deployment
    # ====================================
    # Configure deployment based on your hosting platform
    # Uncomment and modify the appropriate section below:
    
    # --- Option 1: Azure App Service ---
    # - name: Deploy to Azure Web App
    #   uses: azure/webapps-deploy@v2
    #   with:
    #     app-name: 'your-app-staging'
    #     publish-profile: ${{ secrets.AZURE_STAGING_PUBLISH_PROFILE }}
    #     package: staging-api.zip
    
    # --- Option 2: AWS Elastic Beanstalk ---
    # - name: Deploy to AWS EB
    #   uses: einaregilsson/beanstalk-deploy@v21
    #   with:
    #     aws_access_key: ${{ secrets.AWS_ACCESS_KEY_ID }}
    #     aws_secret_key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
    #     application_name: your-app
    #     environment_name: your-app-staging
    #     version_label: ${{ github.sha }}
    #     region: us-east-1
    #     deployment_package: staging-api.zip
    
    # --- Option 3: Docker/Kubernetes ---
    # - name: Build and push Docker image
    #   run: |
    #     docker build -t your-registry/your-app:staging-${{ github.sha }} .
    #     docker push your-registry/your-app:staging-${{ github.sha }}
    # - name: Deploy to Kubernetes
    #   run: |
    #     kubectl set image deployment/your-app your-app=your-registry/your-app:staging-${{ github.sha }} -n staging
    
    # --- Option 4: IIS/Windows Server (self-hosted runner) ---
    # - name: Deploy to IIS
    #   run: |
    #     Stop-WebSite -Name "YourApp-Staging"
    #     Expand-Archive -Path staging-api.zip -DestinationPath C:\inetpub\staging\api -Force
    #     Expand-Archive -Path staging-frontend.zip -DestinationPath C:\inetpub\staging\www -Force
    #     Start-WebSite -Name "YourApp-Staging"
    
    # --- Default: Placeholder for manual configuration ---
    - name: Deploy to staging
      id: deploy
      run: |
        echo "🚀 Deploying to staging environment..."
        echo "Version: ${{ github.sha }}"
        # Replace this section with actual deployment commands
        # Example: Copy files to server, restart services, etc.
        echo "url=https://staging.your-app.com" >> $GITHUB_OUTPUT
        
    - name: Verify deployment health
      run: |
        echo "🏥 Checking staging deployment health..."
        # Uncomment and modify for your staging URL:
        # curl -f ${{ steps.deploy.outputs.url }}/health || exit 1
        echo "✅ Staging deployment healthy"
        
    - name: Run post-deployment tests
      run: |
        echo "🧪 Running post-deployment smoke tests..."
        # Add API endpoint tests, critical user flow tests, etc.
        echo "✅ Post-deployment tests passed"

  notify-deployment:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: always()
    
    steps:
    - name: Create deployment summary
      run: |
        echo "## 🚀 Staging Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- **Status**: ${{ needs.deploy-staging.result == 'success' && '✅ Success' || '❌ Failed' }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Environment**: Staging" >> $GITHUB_STEP_SUMMARY
        echo "- **Version**: \`${{ github.sha }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Branch**: \`${{ github.ref_name }}\`" >> $GITHUB_STEP_SUMMARY
        echo "- **Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
        echo "- **Workflow run**: [#${{ github.run_number }}](${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }})" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.deploy-staging.result }}" == "success" ]; then
          echo "### Next Steps" >> $GITHUB_STEP_SUMMARY
          echo "1. Test the staging environment" >> $GITHUB_STEP_SUMMARY
          echo "2. Get stakeholder approval" >> $GITHUB_STEP_SUMMARY
          echo "3. Create PR from \`dev\` → \`main\` for production deployment" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ⚠️ Action Required" >> $GITHUB_STEP_SUMMARY
          echo "The staging deployment failed. Please check the logs and fix any issues." >> $GITHUB_STEP_SUMMARY
        fi
        
    # --- Notification Options ---
    # Uncomment and configure the appropriate notification method:
    
    # Option 1: Slack notification
    # - name: Notify Slack
    #   if: always()
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     text: |
    #       Staging Deployment ${{ job.status == 'success' && '✅' || '❌' }}
    #       Version: ${{ github.sha }}
    #       Environment: Staging
    #       Deployed by: ${{ github.actor }}
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}
    
    # Option 2: Microsoft Teams notification
    # - name: Notify Teams
    #   if: always()
    #   uses: jdcargile/ms-teams-notification@v1.3
    #   with:
    #     github-token: ${{ github.token }}
    #     ms-teams-webhook-uri: ${{ secrets.TEAMS_WEBHOOK }}
    #     notification-summary: Staging Deployment ${{ job.status }}
    #     notification-color: ${{ job.status == 'success' && '00FF00' || 'FF0000' }}
    
    # Option 3: Email notification
    # - name: Send email notification
    #   if: always()
    #   uses: dawidd6/action-send-mail@v3
    #   with:
    #     server_address: smtp.gmail.com
    #     server_port: 465
    #     username: ${{ secrets.EMAIL_USERNAME }}
    #     password: ${{ secrets.EMAIL_PASSWORD }}
    #     subject: Staging Deployment ${{ job.status }} - ${{ github.sha }}
    #     to: devops@your-company.com
    #     from: GitHub Actions
    #     body: |
    #       Staging deployment has ${{ job.status }}.
    #       Version: ${{ github.sha }}
    #       Deployed by: ${{ github.actor }}
    #       View run: ${{ github.server_url }}/${{ github.repository }}/actions/runs/${{ github.run_id }}
    # - name: Send Slack notification
    #   if: always()
    #   uses: 8398a7/action-slack@v3
    #   with:
    #     status: ${{ job.status }}
    #     text: 'Staging deployment ${{ needs.deploy-staging.result }}'
    #     webhook_url: ${{ secrets.SLACK_WEBHOOK }}