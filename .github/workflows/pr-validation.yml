name: Pull Request Validation

on:
  pull_request:
    branches: [ dev ]
    types: [opened, synchronize, reopened]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  build:
    name: Build Solution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Restore .NET dependencies
      run: dotnet restore Crud.All.sln
      
    - name: Build solution
      run: dotnet build Crud.All.sln --no-restore --configuration Release
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
        path: |
          src/*/bin/Release/
          test/*/bin/Release/
        retention-days: 1

  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
        
    - name: Run Backend Unit Tests
      run: dotnet test test/Tests.Unit.Backend/Tests.Unit.Backend.csproj --no-build --configuration Release --logger trx --results-directory TestResults/
      
    - name: Upload backend unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-unit-tests-${{ github.run_number }}
        path: TestResults/
        
    - name: Publish backend unit test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Unit Tests
        path: TestResults/*.trx
        reporter: dotnet-trx

  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
      
    - name: Install Angular dependencies
      working-directory: ./src/Angular
      run: npm ci
      
    - name: Lint check
      working-directory: ./src/Angular
      run: npm run lint
      
    - name: Run Angular Unit Tests with Coverage
      working-directory: ./src/Angular
      run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-unit-tests-${{ github.run_number }}
        path: src/Angular/coverage/

  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
        
    - name: Run Backend Integration Tests with SQLite
      run: dotnet test test/Tests.Integration.Backend/Tests.Integration.Backend.csproj --no-build --configuration Release --logger trx --results-directory TestResults/
      env:
        CI: true
      timeout-minutes: 10
      
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-integration-tests-${{ github.run_number }}
        path: TestResults/
        
    - name: Publish backend integration test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Integration Tests
        path: TestResults/*.trx
        reporter: dotnet-trx

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.54.0-noble
    needs: [build, backend-unit-tests, frontend-unit-tests]
    if: |
      always() && 
      needs.build.result == 'success' &&
      needs.backend-unit-tests.result == 'success' &&
      needs.frontend-unit-tests.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
      
    - name: Install Angular dependencies
      working-directory: ./src/Angular
      run: npm ci
      
    - name: Build Angular for production
      working-directory: ./src/Angular
      run: npm run build
      
    - name: Install E2E test dependencies
      working-directory: ./test/Tests.E2E.NG
      run: npm ci
      
    # Playwright browsers are pre-installed in the Docker image
        
    - name: Run E2E Tests
      working-directory: ./test/Tests.E2E.NG
      run: |
        echo "🧪 Running E2E tests with Playwright globalSetup..."
        npm run test:fast
      env:
        CI: true
        API_PORT: 5172
        ANGULAR_PORT: 4200
        ASPNETCORE_ENVIRONMENT: Testing
        DatabaseProvider: SQLite
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-tests-${{ github.run_number }}
        path: |
          test/Tests.E2E.NG/playwright-report/
          test/Tests.E2E.NG/test-results/
          
    - name: Upload server logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-server-logs-${{ github.run_number }}
        path: |
          src/Api/api.log
          src/Angular/angular.log
          
    - name: Cleanup
      if: always()
      run: |
        echo "🧹 Cleaning up test artifacts..."
        # Playwright globalTeardown handles server shutdown
        # Just clean up any leftover test databases
        rm -f /tmp/CrudTest_*.db 2>/dev/null || true
        echo "✅ Cleanup complete"

  pr-validation-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [build, backend-unit-tests, frontend-unit-tests, backend-integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: PR Status Check
      run: |
        echo "## 🔍 Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        
        echo "| Build | ${{ needs.build.result == 'success' && '✅ Passed' || (needs.build.result == 'failure' && '❌ Failed') || (needs.build.result == 'cancelled' && '⏹️ Cancelled') || '⏸️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Unit Tests | ${{ needs.backend-unit-tests.result == 'success' && '✅ Passed' || (needs.backend-unit-tests.result == 'failure' && '❌ Failed') || (needs.backend-unit-tests.result == 'cancelled' && '⏹️ Cancelled') || '⏸️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Unit Tests | ${{ needs.frontend-unit-tests.result == 'success' && '✅ Passed' || (needs.frontend-unit-tests.result == 'failure' && '❌ Failed') || (needs.frontend-unit-tests.result == 'cancelled' && '⏹️ Cancelled') || '⏸️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Integration Tests | ${{ needs.backend-integration-tests.result == 'success' && '✅ Passed' || (needs.backend-integration-tests.result == 'failure' && '❌ Failed') || (needs.backend-integration-tests.result == 'cancelled' && '⏹️ Cancelled') || '⏸️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || (needs.e2e-tests.result == 'failure' && '❌ Failed') || (needs.e2e-tests.result == 'cancelled' && '⏹️ Cancelled') || '⏸️ Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check overall status
        if [ "${{ needs.build.result }}" == "success" ] && 
           [ "${{ needs.backend-unit-tests.result }}" == "success" ] && 
           [ "${{ needs.frontend-unit-tests.result }}" == "success" ] && 
           [ "${{ needs.backend-integration-tests.result }}" == "success" ] && 
           [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "### ✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
          echo "This PR is ready for review." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Some checks failed" >> $GITHUB_STEP_SUMMARY
          echo "Please fix the failing tests before merging." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi