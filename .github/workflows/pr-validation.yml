name: Pull Request Validation

on:
  pull_request:
    branches: [ dev ]
    types: [opened, synchronize, reopened]

permissions:
  contents: read
  checks: write
  pull-requests: write

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  build:
    name: Build Solution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Restore .NET dependencies
      run: dotnet restore Crud.All.sln
      
    - name: Build solution
      run: dotnet build Crud.All.sln --no-restore --configuration Release
      
    - name: Verify appsettings files exist
      run: |
        echo "üìÅ Verifying appsettings files before artifact upload:"
        ls -la src/Api/appsettings*.json
        echo "‚úÖ All appsettings files found"
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
        path: |
          src/*/bin/Release/
          test/*/bin/Release/
          src/Api/appsettings*.json
        retention-days: 1

  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: false  # TEMPORARILY DISABLED - Only running 3 E2E tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
    
    - name: Copy appsettings to test output
      run: |
        echo "üìÅ Listing artifact structure:"
        ls -la src/Api/ || echo "src/Api/ not found"
        ls -la src/Api/bin/Release/net8.0/ || echo "bin directory not found"
        
        # Copy appsettings files if they exist
        if [ -f "src/Api/appsettings.json" ]; then
          cp src/Api/appsettings*.json src/Api/bin/Release/net8.0/
          echo "‚úÖ Appsettings files copied from src/Api/"
        elif [ -f "appsettings.json" ]; then
          cp appsettings*.json src/Api/bin/Release/net8.0/
          echo "‚úÖ Appsettings files copied from root"
        else
          echo "‚ö†Ô∏è No appsettings files found to copy"
        fi
        
        echo "üìÅ Final output directory contents:"
        ls -la src/Api/bin/Release/net8.0/*.json || echo "No JSON files in output"
        
    - name: Run Backend Unit Tests
      run: dotnet test test/Tests.Unit.Backend/Tests.Unit.Backend.csproj --no-build --configuration Release --logger "trx;LogFileName=test-results.trx" --logger "console;verbosity=normal" --results-directory TestResults/
      
    - name: Upload backend unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-unit-tests-${{ github.run_number }}
        path: TestResults/
        
    - name: Publish backend unit test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Unit Tests
        path: TestResults/*.trx
        reporter: dotnet-trx

  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    if: false  # TEMPORARILY DISABLED - Only running 3 E2E tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
      
    - name: Install Angular dependencies
      working-directory: ./src/Angular
      run: npm ci
      
    - name: Lint check
      working-directory: ./src/Angular
      run: npm run lint
      
    - name: Run Angular Unit Tests with Coverage
      working-directory: ./src/Angular
      run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-unit-tests-${{ github.run_number }}
        path: src/Angular/coverage/

  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: [build]
    if: false  # TEMPORARILY DISABLED - Only running 3 E2E tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
    
    - name: Copy appsettings to test output
      run: |
        echo "üìÅ Listing artifact structure:"
        ls -la src/Api/ || echo "src/Api/ not found"
        ls -la src/Api/bin/Release/net8.0/ || echo "bin directory not found"
        
        # Copy appsettings files if they exist
        if [ -f "src/Api/appsettings.json" ]; then
          cp src/Api/appsettings*.json src/Api/bin/Release/net8.0/
          echo "‚úÖ Appsettings files copied from src/Api/"
        elif [ -f "appsettings.json" ]; then
          cp appsettings*.json src/Api/bin/Release/net8.0/
          echo "‚úÖ Appsettings files copied from root"
        else
          echo "‚ö†Ô∏è No appsettings files found to copy"
        fi
        
        echo "üìÅ Final output directory contents:"
        ls -la src/Api/bin/Release/net8.0/*.json || echo "No JSON files in output"
        
    - name: Run Backend Integration Tests with SQLite
      run: dotnet test test/Tests.Integration.Backend/Tests.Integration.Backend.csproj --no-build --configuration Release --logger "trx;LogFileName=test-results.trx" --logger "console;verbosity=detailed" --results-directory TestResults/
      env:
        CI: true
        ASPNETCORE_ENVIRONMENT: Testing
      timeout-minutes: 10
      
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-integration-tests-${{ github.run_number }}
        path: TestResults/
        
    - name: Publish backend integration test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Integration Tests
        path: TestResults/*.trx
        reporter: dotnet-trx

  smoke-tests:
    name: Smoke Tests (Quick Validation)
    runs-on: ubuntu-latest
    needs: [build, backend-unit-tests, frontend-unit-tests, backend-integration-tests]
    if: false  # TEMPORARILY DISABLED - Only running 3 E2E tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
    
    - name: Copy appsettings to test output
      run: |
        echo "üìÅ Setting up smoke test environment..."
        echo "üìÅ Listing artifact structure:"
        ls -la src/Api/ || echo "src/Api/ not found"
        ls -la src/Api/bin/Release/net8.0/ || echo "bin directory not found"
        
        # Copy appsettings files - they should be in src/Api from the artifact
        if [ -f "src/Api/appsettings.json" ]; then
          cp src/Api/appsettings*.json src/Api/bin/Release/net8.0/
          echo "‚úÖ Appsettings files copied from src/Api/"
        else
          echo "‚ùå No appsettings files found in src/Api/"
          echo "üìÅ Checking current directory:"
          ls -la *.json 2>/dev/null || echo "No JSON files in root"
          exit 1
        fi
        
        echo "üìÅ Final output directory contents:"
        ls -la src/Api/bin/Release/net8.0/*.json || echo "No JSON files in output"
        
    - name: Run API Health Check Test
      run: |
        echo "üî• Running smoke test: API Health Check"
        dotnet test test/Tests.Integration.Backend/Tests.Integration.Backend.csproj \
          --no-build --configuration Release \
          --filter "FullyQualifiedName~ApiHealthTests.API_Should_Be_Responsive" \
          --logger "console;verbosity=normal" \
          --results-directory TestResults/
      env:
        CI: true
        ASPNETCORE_ENVIRONMENT: Testing
      continue-on-error: true
      
    - name: Run Basic CRUD Smoke Test
      run: |
        echo "üî• Running smoke test: Basic CRUD Operations"
        dotnet test test/Tests.Integration.Backend/Tests.Integration.Backend.csproj \
          --no-build --configuration Release \
          --filter "FullyQualifiedName~PeopleControllerTests.GET_People_Should_Return_Empty_List_Initially" \
          --logger "console;verbosity=normal" \
          --results-directory TestResults/
      env:
        CI: true
        ASPNETCORE_ENVIRONMENT: Testing
      continue-on-error: true
      
    - name: Run Simple Authentication Test
      run: |
        echo "üî• Running smoke test: Basic Authentication"
        echo "Current directory: $(pwd)"
        echo "Directory contents:"
        ls -la
        echo "Running test with detailed logging..."
        dotnet test test/Tests.Integration.Backend/Tests.Integration.Backend.csproj \
          --no-build --configuration Release \
          --filter "FullyQualifiedName~AuthControllerTests.POST_Register_Should_Create_User_And_Return_Tokens" \
          --logger "console;verbosity=detailed" \
          --results-directory TestResults/ || (echo "Test failed with exit code: $?" && exit 1)
      env:
        CI: true
        ASPNETCORE_ENVIRONMENT: Testing
      continue-on-error: true
      
    - name: Smoke Test Summary
      if: always()
      run: |
        echo "## üî• Smoke Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "Smoke tests are configured with continue-on-error to gather maximum diagnostic information." >> $GITHUB_STEP_SUMMARY
        echo "Check individual test steps above for specific failures." >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        if ls TestResults/*.trx 2>/dev/null; then
          echo "‚úÖ Smoke tests executed and produced results" >> $GITHUB_STEP_SUMMARY
        else
          echo "‚ö†Ô∏è No test result files found - smoke tests may not have executed properly" >> $GITHUB_STEP_SUMMARY
        fi

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    container:
      image: mcr.microsoft.com/playwright:v1.55.0-noble
      options: --network=host
    needs: [build]
    if: needs.build.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
      
    - name: Install Angular dependencies
      working-directory: ./src/Angular
      run: npm ci
      
    - name: Build Angular for production
      working-directory: ./src/Angular
      run: npm run build
      
    - name: Install E2E test dependencies
      working-directory: ./test/Tests.E2E.NG
      run: npm ci
      
    # Playwright browsers are pre-installed in the Docker image
    
    - name: Debug container environment
      run: |
        echo "üîç Debugging container environment..."
        echo "Current directory: $(pwd)"
        echo "User: $(whoami)"
        echo "Directory structure:"
        ls -la
        echo "Parent directory:"
        ls -la ..
        echo "SQLite3 check:"
        which sqlite3 || echo "sqlite3 not found in PATH"
        echo "Dotnet info:"
        dotnet --info || echo "dotnet not found"
        
    - name: Set execute permissions for API binary
      run: |
        chmod +x ./src/Api/bin/Release/net8.0/Api
        echo "‚úÖ Execute permissions set for API binary"
        
    - name: Run E2E Tests
      working-directory: ./test/Tests.E2E.NG
      run: |
        echo "üß™ Running 3 E2E tests (API health, get person, get role)..."
        npx playwright test tests/minimal-e2e.spec.ts --reporter=list --config=playwright.config.fast.ts
      env:
        CI: true
        API_PORT: 5172
        ANGULAR_PORT: 4200
        ASPNETCORE_ENVIRONMENT: Testing
        DatabaseProvider: SQLite
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-tests-${{ github.run_number }}
        path: |
          test/Tests.E2E.NG/playwright-report/
          test/Tests.E2E.NG/test-results/
          
    - name: Upload server logs
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: e2e-server-logs-${{ github.run_number }}
        path: |
          src/Api/api.log
          src/Angular/angular.log
          
    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up test artifacts..."
        # Playwright globalTeardown handles server shutdown
        # Just clean up any leftover test databases
        rm -f /tmp/CrudTest_*.db 2>/dev/null || true
        echo "‚úÖ Cleanup complete"

  pr-validation-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [build, backend-unit-tests, frontend-unit-tests, backend-integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: PR Status Check
      run: |
        echo "## üîç Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        
        echo "| Build | ${{ needs.build.result == 'success' && '‚úÖ Passed' || (needs.build.result == 'failure' && '‚ùå Failed') || (needs.build.result == 'cancelled' && '‚èπÔ∏è Cancelled') || '‚è∏Ô∏è Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Unit Tests | ${{ needs.backend-unit-tests.result == 'success' && '‚úÖ Passed' || (needs.backend-unit-tests.result == 'failure' && '‚ùå Failed') || (needs.backend-unit-tests.result == 'cancelled' && '‚èπÔ∏è Cancelled') || '‚è∏Ô∏è Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Unit Tests | ${{ needs.frontend-unit-tests.result == 'success' && '‚úÖ Passed' || (needs.frontend-unit-tests.result == 'failure' && '‚ùå Failed') || (needs.frontend-unit-tests.result == 'cancelled' && '‚èπÔ∏è Cancelled') || '‚è∏Ô∏è Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Integration Tests | ${{ needs.backend-integration-tests.result == 'success' && '‚úÖ Passed' || (needs.backend-integration-tests.result == 'failure' && '‚ùå Failed') || (needs.backend-integration-tests.result == 'cancelled' && '‚èπÔ∏è Cancelled') || '‚è∏Ô∏è Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '‚úÖ Passed' || (needs.e2e-tests.result == 'failure' && '‚ùå Failed') || (needs.e2e-tests.result == 'cancelled' && '‚èπÔ∏è Cancelled') || '‚è∏Ô∏è Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check overall status - TEMPORARILY only checking build and E2E
        if [ "${{ needs.build.result }}" == "success" ] && 
           [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "### ‚úÖ Build and E2E tests passed!" >> $GITHUB_STEP_SUMMARY
          echo "TEMPORARY: Only running 3 E2E tests for debugging." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Some checks failed" >> $GITHUB_STEP_SUMMARY
          echo "Build result: ${{ needs.build.result }}" >> $GITHUB_STEP_SUMMARY
          echo "E2E result: ${{ needs.e2e-tests.result }}" >> $GITHUB_STEP_SUMMARY
          exit 1
        fi