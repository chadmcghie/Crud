name: Pull Request Validation

on:
  pull_request:
    branches: [ dev ]
    types: [opened, synchronize, reopened]

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  # Full test suite for PRs targeting dev branch
  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore .NET dependencies
      run: dotnet restore Crud.All.sln
      
    - name: Build backend
      run: dotnet build Crud.All.sln --no-restore --configuration Release
      
    - name: Run Backend Unit Tests
      run: dotnet test test/Tests.Unit.Backend/Tests.Unit.Backend.csproj --no-build --configuration Release --logger trx --results-directory TestResults/
      
    - name: Upload backend unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-unit-test-results-${{ github.run_number }}
        path: TestResults/

  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
      
    - name: Install Angular dependencies
      working-directory: ./src/Angular
      run: npm ci
      
    - name: Lint check
      working-directory: ./src/Angular
      run: npm run lint
      
    - name: Run Angular Unit Tests with Coverage
      working-directory: ./src/Angular
      run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-coverage-${{ github.run_number }}
        path: src/Angular/coverage/

  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: backend-unit-tests
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Restore dependencies
      run: dotnet restore Crud.All.sln
      
    - name: Build solution
      run: dotnet build Crud.All.sln --no-restore --configuration Release
      
    - name: Run Backend Integration Tests with SQLite
      run: dotnet test test/Tests.Integration.Backend/Tests.Integration.Backend.csproj --no-build --configuration Release --logger trx --results-directory TestResults/
      env:
        CI: true
      timeout-minutes: 10
      
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-integration-test-results-${{ github.run_number }}
        path: TestResults/

  e2e-tests:
    name: End-to-End Tests
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-unit-tests]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
        
    - name: Restore .NET dependencies
      run: dotnet restore Crud.All.sln
      
    - name: Build solution
      run: dotnet build Crud.All.sln --no-restore --configuration Release
      
    - name: Install Angular dependencies
      working-directory: ./src/Angular
      run: npm ci
      
    - name: Build Angular for production
      working-directory: ./src/Angular
      run: npm run build
      
    - name: Install E2E test dependencies
      working-directory: ./test/Tests.E2E.NG
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: ./test/Tests.E2E.NG
      run: npx playwright install --with-deps chromium
      
    - name: Kill any existing processes on test ports
      run: |
        sudo lsof -ti:5172,4200 | xargs -r kill -9 || true
        sleep 2
      
    - name: Start API server
      working-directory: ./src/Api
      run: |
        dotnet run --no-launch-profile --configuration Release &
        echo "API_PID=$!" >> $GITHUB_ENV
      env:
        ASPNETCORE_ENVIRONMENT: E2E
        ASPNETCORE_URLS: http://localhost:5172
        CI: true
        DatabaseProvider: SQLite
        ConnectionStrings__DefaultConnection: "Data Source=CrudAppE2E.db"
        
    - name: Wait for API to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:5172/health 2>/dev/null; do echo "Waiting for API..."; sleep 2; done'
        echo "API is ready!"
        
    - name: Start Angular server
      working-directory: ./src/Angular
      run: |
        npm start &
        echo "ANGULAR_PID=$!" >> $GITHUB_ENV
        
    - name: Wait for Angular to be ready
      run: |
        timeout 60 bash -c 'until curl -f http://localhost:4200 2>/dev/null; do echo "Waiting for Angular..."; sleep 2; done'
        echo "Angular is ready!"
        
    - name: Run E2E Tests
      working-directory: ./test/Tests.E2E.NG
      run: |
        npm run test:api-only
        npm run test:integration
      env:
        CI: true
        API_BASE_URL: http://localhost:5172
        ANGULAR_BASE_URL: http://localhost:4200
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-test-results-${{ github.run_number }}
        path: |
          test/Tests.E2E.NG/playwright-report/
          test/Tests.E2E.NG/test-results/
          
    - name: Stop servers
      if: always()
      run: |
        if [ ! -z "$API_PID" ]; then kill $API_PID || true; fi
        if [ ! -z "$ANGULAR_PID" ]; then kill $ANGULAR_PID || true; fi

  pr-validation-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [backend-unit-tests, frontend-unit-tests, backend-integration-tests, e2e-tests]
    if: always()
    
    steps:
    - name: PR Status Check
      run: |
        echo "## 🔍 Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Unit Tests | ${{ needs.backend-unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Unit Tests | ${{ needs.frontend-unit-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Integration Tests | ${{ needs.backend-integration-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Tests | ${{ needs.e2e-tests.result == 'success' && '✅ Passed' || '❌ Failed' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ needs.backend-unit-tests.result }}" == "success" ] && 
           [ "${{ needs.frontend-unit-tests.result }}" == "success" ] && 
           [ "${{ needs.backend-integration-tests.result }}" == "success" ] && 
           [ "${{ needs.e2e-tests.result }}" == "success" ]; then
          echo "### ✅ All checks passed!" >> $GITHUB_STEP_SUMMARY
          echo "This PR is ready for review." >> $GITHUB_STEP_SUMMARY
        else
          echo "### ❌ Some checks failed" >> $GITHUB_STEP_SUMMARY
          echo "Please fix the failing tests before merging." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi