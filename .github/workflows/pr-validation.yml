name: Pull Request Validation

on:
  pull_request:
    branches: [ main, dev ]
    types: [opened, synchronize, reopened]
  workflow_dispatch:

# Cancel in-progress runs for the same PR/branch
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

permissions:
  contents: write  # Changed from read to write for auto-formatting
  checks: write
  pull-requests: write

env:
  DOTNET_VERSION: '8.0.x'
  NODE_VERSION: '20.x'

jobs:
  build:
    name: Build Solution
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Restore .NET dependencies
      run: dotnet restore Crud.sln
      
    - name: Build solution
      run: dotnet build Crud.sln --no-restore --configuration Release
      
    - name: Verify appsettings files exist
      run: |
        echo "üìÅ Verifying appsettings files before artifact upload:"
        ls -la src/Api/appsettings*.json
        echo "‚úÖ All appsettings files found"
      
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
        path: |
          src/*/bin/Release/
          test/*/bin/Release/
          src/Api/appsettings*.json
        retention-days: 1

  code-quality:
    name: Code Quality & Auto-Format
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}
        fetch-depth: 0
        ref: ${{ github.event.pull_request.head.ref || github.ref_name }}
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
        
    - name: Auto-format Backend Code
      run: |
        echo "üîß Auto-formatting C# code with dotnet format..."
        dotnet format Crud.sln
        echo "‚úÖ Formatting complete"
        
    - name: Frontend Linting
      working-directory: ./src/Angular
      run: |
        echo "üîç Running Angular linting..."
        npm ci
        npm run lint
        
    - name: Commit and Push Formatting Changes
      run: |
        echo "üîç Checking for formatting changes..."
        
        # Configure git
        git config --local user.email "github-actions[bot]@users.noreply.github.com"
        git config --local user.name "github-actions[bot]"
        
        # Add all changes including line ending normalization
        git add -A --renormalize
        
        # Check if there are any staged changes
        if ! git diff --staged --quiet; then
          echo "‚ú® Formatting changes detected, committing..."
          git commit -m "style: auto-format code with dotnet format [skip ci]
        
        Applied automatic formatting to ensure consistent code style.
        This commit was automatically generated by GitHub Actions."
          
          # Push changes
          git push origin HEAD:${{ github.event.pull_request.head.ref || github.ref_name }}
          echo "‚úÖ Formatting changes pushed successfully"
          
          # IMPORTANT: Pull the changes back to update our local working copy
          echo "üì• Pulling formatting changes back to working copy..."
          git pull origin ${{ github.event.pull_request.head.ref || github.ref_name }}
        else
          echo "‚úÖ No formatting changes needed - code is already properly formatted"
        fi
        
    - name: Verify Final Formatting
      run: |
        echo "üîç Verifying that all code is now properly formatted..."
        dotnet format Crud.sln --verify-no-changes --verbosity diagnostic
        if [ $? -ne 0 ]; then
          echo "‚ùå ERROR: Code still has formatting issues after auto-format!"
          echo "This should not happen. Please check the workflow configuration."
          exit 1
        fi
        echo "‚úÖ All code is properly formatted and ready for merge!"
        
    - name: Check for common code issues
      run: |
        echo "üîç Checking for common issues..."
        # Check for console.log in TypeScript files (except test files)
        if grep -r "console\.log" --include="*.ts" --include="*.tsx" --exclude-dir=node_modules --exclude-dir=test --exclude-dir=tests src/Angular; then
          echo "‚ö†Ô∏è Warning: console.log statements found in production code"
        fi
        
        # Check for TODO comments that should be addressed
        if grep -r "TODO" --include="*.cs" --include="*.ts" --exclude-dir=node_modules src/; then
          echo "‚ÑπÔ∏è Info: TODO comments found - consider addressing them"
        fi

  backend-unit-tests:
    name: Backend Unit Tests
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
    
    - name: Copy appsettings to test output
      run: |
        echo "üìÅ Listing artifact structure:"
        ls -la src/Api/ || echo "src/Api/ not found"
        ls -la src/Api/bin/Release/net8.0/ || echo "bin directory not found"
        
        # Copy appsettings files if they exist
        if [ -f "src/Api/appsettings.json" ]; then
          cp src/Api/appsettings*.json src/Api/bin/Release/net8.0/
          echo "‚úÖ Appsettings files copied from src/Api/"
        elif [ -f "appsettings.json" ]; then
          cp appsettings*.json src/Api/bin/Release/net8.0/
          echo "‚úÖ Appsettings files copied from root"
        else
          echo "‚ö†Ô∏è No appsettings files found to copy"
        fi
        
        echo "üìÅ Final output directory contents:"
        ls -la src/Api/bin/Release/net8.0/*.json || echo "No JSON files in output"
        
    - name: Run Backend Unit Tests
      run: dotnet test test/Tests.Unit.Backend/Tests.Unit.Backend.csproj --no-build --configuration Release --logger "trx;LogFileName=test-results.trx" --logger "console;verbosity=normal" --results-directory TestResults/
      
    - name: Upload backend unit test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-unit-tests-${{ github.run_number }}
        path: TestResults/
        
    - name: Publish backend unit test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Unit Tests
        path: TestResults/*.trx
        reporter: dotnet-trx

  frontend-unit-tests:
    name: Frontend Unit Tests
    runs-on: ubuntu-latest
    needs: [code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
      
    - name: Install Angular dependencies
      working-directory: ./src/Angular
      run: npm ci
      
    - name: Run Angular Unit Tests with Coverage
      working-directory: ./src/Angular
      run: npm run test -- --watch=false --browsers=ChromeHeadless --code-coverage
      
    - name: Upload coverage reports
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: frontend-unit-tests-${{ github.run_number }}
        path: src/Angular/coverage/

  backend-integration-tests:
    name: Backend Integration Tests
    runs-on: ubuntu-latest
    needs: [build, code-quality]
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        cache: true
        cache-dependency-path: 'src/**/*.csproj'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
    
    - name: Copy appsettings to test output
      run: |
        echo "üìÅ Listing artifact structure:"
        ls -la src/Api/ || echo "src/Api/ not found"
        ls -la src/Api/bin/Release/net8.0/ || echo "bin directory not found"
        
        # Copy appsettings files if they exist
        if [ -f "src/Api/appsettings.json" ]; then
          cp src/Api/appsettings*.json src/Api/bin/Release/net8.0/
          echo "‚úÖ Appsettings files copied from src/Api/"
        elif [ -f "appsettings.json" ]; then
          cp appsettings*.json src/Api/bin/Release/net8.0/
          echo "‚úÖ Appsettings files copied from root"
        else
          echo "‚ö†Ô∏è No appsettings files found to copy"
        fi
        
        echo "üìÅ Final output directory contents:"
        ls -la src/Api/bin/Release/net8.0/*.json || echo "No JSON files in output"
        
    - name: Run Backend Integration Tests with SQLite
      run: dotnet test test/Tests.Integration.Backend/Tests.Integration.Backend.csproj --no-build --configuration Release --logger "trx;LogFileName=test-results.trx" --logger "console;verbosity=detailed" --results-directory TestResults/
      env:
        CI: true
        ASPNETCORE_ENVIRONMENT: Testing
      timeout-minutes: 10
      
    - name: Upload integration test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: backend-integration-tests-${{ github.run_number }}
        path: TestResults/
        
    - name: Publish backend integration test results
      uses: dorny/test-reporter@v1
      if: always()
      with:
        name: Backend Integration Tests
        path: TestResults/*.trx
        reporter: dotnet-trx

  e2e-smoke-tests:
    name: E2E Smoke Tests (Quick Validation)
    runs-on: ubuntu-latest
    needs: [build, backend-unit-tests, frontend-unit-tests, backend-integration-tests]
    if: needs.build.result == 'success'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup .NET
      uses: actions/setup-dotnet@v4
      with:
        dotnet-version: ${{ env.DOTNET_VERSION }}
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}
        cache: 'npm'
        cache-dependency-path: 'src/Angular/package-lock.json'
        
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-artifacts-${{ github.run_number }}
      
    - name: Install Angular dependencies
      working-directory: ./src/Angular
      run: npm ci
      
    - name: Build Angular for production
      working-directory: ./src/Angular
      run: npm run build
      
    - name: Install E2E test dependencies
      working-directory: ./test/Tests.E2E.NG
      run: npm ci
      
    - name: Install Playwright browsers
      working-directory: ./test/Tests.E2E.NG
      run: npx playwright install --with-deps chromium
      
    - name: Set execute permissions for API binary
      run: |
        chmod +x ./src/Api/bin/Release/net8.0/Api
        echo "‚úÖ Execute permissions set for API binary"
        
    - name: Run E2E Smoke Tests Only
      working-directory: ./test/Tests.E2E.NG
      run: |
        echo "üöÄ Running E2E smoke tests only for quick PR validation..."
        echo "Tagged with @smoke - should complete in 2-5 minutes"
        npm run test:smoke
      env:
        CI: true
        ASPNETCORE_ENVIRONMENT: Testing
        DatabaseProvider: SQLite
        TEST_RESET_TOKEN: test-only-token
        # Unique database per test run to avoid locking
        TEST_RUN_ID: ${{ github.run_id }}-${{ github.run_number }}
        
    - name: Upload E2E test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: e2e-smoke-tests-${{ github.run_number }}
        path: |
          test/Tests.E2E.NG/playwright-report/
          test/Tests.E2E.NG/test-results/
          
    - name: Upload database files (for debugging)
      uses: actions/upload-artifact@v4
      if: failure()
      with:
        name: database-files-${{ github.run_number }}
        path: |
          CrudTest_*.db
          CrudTest_*.db-wal
          CrudTest_*.db-shm
          
    - name: Cleanup
      if: always()
      run: |
        echo "üßπ Cleaning up test databases..."
        # Remove test database files created during this run
        rm -f CrudTest_*.db CrudTest_*.db-wal CrudTest_*.db-shm 2>/dev/null || true
        echo "‚úÖ Cleanup complete"

  pr-validation-summary:
    name: PR Validation Summary
    runs-on: ubuntu-latest
    needs: [build, backend-unit-tests, frontend-unit-tests, backend-integration-tests, e2e-smoke-tests]
    if: always()
    
    steps:
    - name: PR Status Check
      run: |
        echo "## üîç Pull Request Validation Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Test Results" >> $GITHUB_STEP_SUMMARY
        echo "| Test Suite | Status |" >> $GITHUB_STEP_SUMMARY
        echo "|------------|--------|" >> $GITHUB_STEP_SUMMARY
        
        echo "| Build | ${{ needs.build.result == 'success' && '‚úÖ Passed' || (needs.build.result == 'failure' && '‚ùå Failed') || (needs.build.result == 'cancelled' && '‚èπÔ∏è Cancelled') || '‚è∏Ô∏è Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Unit Tests | ${{ needs.backend-unit-tests.result == 'success' && '‚úÖ Passed' || (needs.backend-unit-tests.result == 'failure' && '‚ùå Failed') || (needs.backend-unit-tests.result == 'cancelled' && '‚èπÔ∏è Cancelled') || '‚è∏Ô∏è Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Frontend Unit Tests | ${{ needs.frontend-unit-tests.result == 'success' && '‚úÖ Passed' || (needs.frontend-unit-tests.result == 'failure' && '‚ùå Failed') || (needs.frontend-unit-tests.result == 'cancelled' && '‚èπÔ∏è Cancelled') || '‚è∏Ô∏è Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| Backend Integration Tests | ${{ needs.backend-integration-tests.result == 'success' && '‚úÖ Passed' || (needs.backend-integration-tests.result == 'failure' && '‚ùå Failed') || (needs.backend-integration-tests.result == 'cancelled' && '‚èπÔ∏è Cancelled') || '‚è∏Ô∏è Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "| E2E Smoke Tests | ${{ needs.e2e-smoke-tests.result == 'success' && '‚úÖ Passed' || (needs.e2e-smoke-tests.result == 'failure' && '‚ùå Failed') || (needs.e2e-smoke-tests.result == 'cancelled' && '‚èπÔ∏è Cancelled') || '‚è∏Ô∏è Skipped' }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        # Check overall status
        if [ "${{ needs.build.result }}" == "success" ] && 
           [ "${{ needs.backend-unit-tests.result }}" == "success" ] &&
           [ "${{ needs.frontend-unit-tests.result }}" == "success" ] &&
           [ "${{ needs.backend-integration-tests.result }}" == "success" ] &&
           [ "${{ needs.e2e-smoke-tests.result }}" == "success" ]; then
          echo "### ‚úÖ All validation checks passed!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**E2E Tests:** Running smoke tests only (~22 tests) for quick PR feedback" >> $GITHUB_STEP_SUMMARY
        else
          echo "### ‚ùå Some validation checks failed" >> $GITHUB_STEP_SUMMARY
          echo "Please review the test results above for details." >> $GITHUB_STEP_SUMMARY
          exit 1
        fi